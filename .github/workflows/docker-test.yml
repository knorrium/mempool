name: Docker build for testing
env:
  DOCKER_CLI_EXPERIMENTAL: enabled
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0

on:
  push:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-18.04
    name: Build and run
    steps:
      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Checkout project
        uses: actions/checkout@629c2de402a417ea7690ca6ce3f33229e27606a5 # v2

      - name: Init repo for Dockerization
        run: docker/init.sh "$SHORT_SHA"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@27d0a4f181a40b142cce983c5393082c365d1480 # v1
        id: qemu

      - name: Setup Docker buildx action
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25 # v1
        id: buildx

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cache Docker layers
        uses: actions/cache@661fd3eb7f2f20d8c7c84bc2b0509efd7a826628 # v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run Docker buildx for frontend against hash
        run: |
          docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache-new" \
          --platform linux/amd64 \
          --tag ${{ secrets.DOCKER_HUB_USER }}/frontend:$SHORT_SHA \
          --tag ${{ secrets.DOCKER_HUB_USER }}/frontend:latest \
          --output "type=docker,dest=/tmp/frontend.tar" ./frontend/ \
          --build-arg commitHash=$SHORT_SHA \
          --build-arg allNetworks=true

      - name: Upload image
        uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: /tmp/frontend.tar

      - name: List folder
        run: |
          ls -lasFR /tmp/frontend.tar

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  use-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx for testing
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: frontend
          path: /tmp

      - name: List folder
        run: |
          ls -lasFR /tmp/frontend.tar

      - name: Load image
        run: |
          docker load --input /tmp/frontend.tar
          docker image ls -a
          docker image inspect ${{ secrets.DOCKER_HUB_USER }}/frontend:latest

      - name: Start frontend
        run: |
          docker run -d -p 81:8080 --name frontend ${{ secrets.DOCKER_HUB_USER }}/frontend:latest

      - name: Check frontend is running
        run: |
          docker ps

      - name: Sleep for 35 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: "35s"

      - name: Check frontend is running 2
        run: |
          docker ps

      - name: List remote files
        run: |
          docker exec -t frontend ls -R /var/www

      - name: nginx-conf
        run: |
          docker exec -t frontend cat /etc/nginx/nginx.conf

      - name: nginx-mempool-conf
        run: |
          docker exec -t frontend cat /etc/nginx/conf.d/nginx-mempool.conf

      # - name: List remote files
      # run: |
      # docker exec -t frontend "ls -R /var"

      - name: curl
        run: |
          curl -vvv http://localhost:81/ --silent

      - name: Chrome browser tests (Mempool)
        uses: cypress-io/github-action@v4
        with:
          tag: ${{ github.event_name }}
          working-directory: frontend
          wait-on: "http://localhost:81"
          wait-on-timeout: 120
          record: true
          parallel: true
          config: baseUrl=http://localhost:81/
          spec: |
            cypress/e2e/mainnet/*.spec.ts
            cypress/e2e/signet/*.spec.ts
            cypress/e2e/testnet/*.spec.ts
          group: Tests on Chrome (Mempool)
          browser: chrome
          ci-build-id: "${{ github.sha }}-${{ github.workflow }}-${{ github.event_name }}"
        env:
          COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}

      # - name: ${{ matrix.browser }} browser tests (Liquid)
      #   uses: cypress-io/github-action@v4
      #   if: always()
      #   with:
      #     tag: ${{ github.event_name }}
      #     working-directory: frontend
      #     wait-on: "http://localhost:81"
      #     wait-on-timeout: 120
      #     record: true
      #     parallel: true
      #     config: baseUrl=http://localhost:81/
      #     spec: |
      #       cypress/e2e/liquid/liquid.spec.ts
      #       cypress/e2e/liquidtestnet/liquidtestnet.spec.ts
      #     group: Tests on ${{ matrix.browser }} (Liquid)
      #     browser: ${{ matrix.browser }}
      #     ci-build-id: "${{ github.sha }}-${{ github.workflow }}-${{ github.event_name }}"
      #   env:
      #     COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title }}
      #     CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}

      # - name: ${{ matrix.browser }} browser tests (Bisq)
      #   uses: cypress-io/github-action@v4
      #   if: always()
      #   with:
      #     tag: ${{ github.event_name }}
      #     working-directory: frontend
      #     wait-on: "http://localhost:81"
      #     wait-on-timeout: 120
      #     record: true
      #     parallel: true
      #     config: baseUrl=http://localhost:81/
      #     spec: cypress/e2e/bisq/bisq.spec.ts
      #     group: Tests on ${{ matrix.browser }} (Bisq)
      #     browser: ${{ matrix.browser }}
      #     ci-build-id: "${{ github.sha }}-${{ github.workflow }}-${{ github.event_name }}"
      #   env:
      #     COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title }}
      #     CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
